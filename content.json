{"meta":{"title":"小前端FE","subtitle":"Small Front End","description":"","author":"SFE","url":"http://blog.smallsfe.com"},"pages":[{"title":"","date":"2017-01-22T16:15:26.000Z","updated":"2017-01-22T16:15:26.000Z","comments":true,"path":"about/index.html","permalink":"http://blog.smallsfe.com/about/index.html","excerpt":"","text":"关于SFESFE是谁SEF是Small Front End的缩写。 Small表示我们一群新人的面貌。我们是一群想搞事情的前端萌新。 SFE的愿景作为前端萌新，一起共同成长，互相督促进步，聚在SFE下，一起搞点事情。 SFE的大事记 2017.1.9日 小羊建立github组织，我们发愿将SFE建设为一个搞事情的团队。 2017.1.10日 WilsonLiu贡献组织logo 2017.1.11日 在灵儿的筛选下确定组织博客主题 2017.1.13日 启用新的域名smallsfe.com,博客采用blog.smallsfe.com 2017.1.22日 小前端FE公众号注册成功，由此各个媒体平台都建立了相应的官方账号 SFE的发展组织基本法全体成员共同努力为SFE的发展共享自己的力量，与此同时以更高的组织标准要求自己进步成长，与优秀的萌新们一起合作积极的搞事情。组织发展的三个方面清单 博客 (组织日常对外的最重要输出) 工具 (前端组件，类库，框架等) 项目 (具体某一个工程项目，诸如一个记录每日工作时间的微信小程序) 博客博客是SFE对外最重要的输出之一，为了规范组织的运行，博客的运营将由专人负责运营。SFE的成员有需要发布的文章请联系运营人员，提供相应文章(只支持markdown格式的文章)。运营人员只负责基本的发布，并没有义务也没有权利对文章进行修改，因此文章的格式请文章的作者自己好好把关。 当前运营负责人: WilsonLiu SFE各个媒体及论坛注册时须统一面貌如下：名称：小前端FE账号：smallsfe 自有媒体 微博：http://weibo.com/smallsfe 微信公众号： 小前端FE(smallsfe) SFE博客http://blog.smallsfe.com QQ: 1926213114 email: sfegsq@qq.com 第三方论坛地址 segmentfault专栏： https://segmentfault.com/blog/smallsfe CSDN专栏： http://blog.csdn.net/smallsfe 工具(待完善)工具的开发采用完全自由的方式，个人开发。在SFE中建立自己的repository，工具希望处于前端领域。 项目(待完善)考虑到项目的开发会涉及到整个产品流程，建议由SFE中一人牵头，至少组织中2人以上进行协作，同时建议邀请有兴趣的朋友共同参与。"},{"title":"","date":"2017-01-23T14:51:47.000Z","updated":"2017-01-23T14:51:47.000Z","comments":true,"path":"member/index.html","permalink":"http://blog.smallsfe.com/member/index.html","excerpt":"","text":"SFE成员(待完善,诙谐中)团队组成 DarkZone since 2015 jeri since 2016 海歌 since 2016 小羊 since 2016 小草 since 2016 逸飞 since 2016 灵儿 since 2017 WilsonLiu since 2017 具体介绍DarkZone外号大大，目前就职于网易，SFE创始人。 jeri大大的同实验室师弟。目前就职于腾讯云。 海歌神一样的男人，属于未来的框架hg.js创始人。目前就职于腾讯浏览器。 小羊目前就职于饿了么。 逸飞头条加班最晚的男人 小草美团最萌前端程序媛。 灵儿外号上海滩一姐，灵儿，就职于点评。 WilsonLiu外号刘总 or 小盛，一只半路出家野生程序猿，目前就职于腾讯理财通的一只萌新。"}],"posts":[{"title":"我眼中的 Electron","slug":"我眼中的  Electron","date":"2017-01-23T13:50:49.000Z","updated":"2017-01-24T00:05:25.000Z","comments":true,"path":"2017/01/23/我眼中的  Electron/","link":"","permalink":"http://blog.smallsfe.com/2017/01/23/我眼中的  Electron/","excerpt":"","text":"之前发过一个装逼的朋友圈：感谢 Electron，我现在有两个身份了：前端开发和 Mac 端开发。 今年开始了一个全新的产品，但项目组并没有 Mac 的开发人员，然后我们前端就顺利的扛下了这面大旗，并且选择了火爆的 Electron（4w+ star）。 年底了，看大家在写各种各样的年终总结，想着我和 Electron 也打情骂俏了好几个月，也该写点东西。不过 Electron 已经够火了，能 google 到很多类似如何使用 Electron 开发桌面端应用的文章，比如用Electron开发桌面应用，也能找到官方中文文档，虽然滞后了一点。所以我也就不再赘述怎样从头写一个 Electron 应用了，在阅读下面的内容之前，最好能先跟随官方的 Quick Start 走一遍。 为什么选择 Electron Electron提供了一个Nodejs的运行时，专注于构建桌面应用，同时使用web页面来作为应用的GUI，你可以将其看作是一个由JavaScript控制的迷你版的Chromium浏览器。 够火自不必说，Electron 的作者和 NW.js（原 node-webkit）是同一人，大家可以去知乎围观维护一个大型开源项目是怎样的体验？这个问题下作者的回答。官方也有 Electron 和 NW.js 的对比，相信作者在新的项目中有了新的思考，所以选择 Electron 是个对的选择，并且我们只需要开发 Mac 端（组内有 Windows 开发人员），没有对 XP 系统兼容的要求。 也有考虑过像 MacGap 这样的解决方案，不过 MacGap 是基于 webkit 内核的，并不支持 IndexedDB，而我们的项目依赖的第三方服务是依赖 IndexedDB 做为本地存储的。并且 Electron 更强大，比如新开 webview 加载第三方页面，并且可以预加载(preload) JavaScript来作为 jssdk 供 web 应用使用。 所以 Electron，就是你了！ 主进程和渲染进程个人感觉，理解 Electron 最重要应该就是理解主进程（Main Process）和渲染进程（Render Process）了。理解了这两者，其他内容花费些时间查查API文档即可。 Electron 中，入口是一个 js 文件（和 NW.js 不同，入口是 html 文件），运行这个入口文件（通常会是 package.json 里的 main 脚本）的进程称作主进程，在主进程使用 BrowserWindow 模块可以创建并管理 web 页面，也就是应用的 GUI。 12345const &#123;BrowserWindow&#125; = require('electron')// 主进程创建web页面let someWindow = new BrowserWindow(winOpts)// 加载本地的文件someWindow.loadURL('file://' + __dirname + '/index.html') 在主进程创建的一个个web页面也都运行着自己的进程，即渲染进程，渲染进程各自独立，各自管理自己的页面，可以想象是浏览器一个个的 tab。 进程间通信我们知道，Web 页面因为安全限制，不能直接访问原生的GUI资源（比如dialog、电源监控），Electron 中也是一样，渲染进程如果想要进行原生的GUI操作，就必须和主进程通讯，请求相应的GUI操作。 Electron 提供了几种渲染进程和主进程通信的方式： 一种是使用ipcMain和ipcRenderer模块，在渲染进程中使用ipcRender模块向主进程发送消息，主进程中ipcMain接收消息，进行操作，如果还需要反馈，则通知渲染进程，渲染进程根据接收的内容执行相应的操作： 12345678910111213141516// 渲染进程中const &#123;ipcRenderer&#125; = require('electron')ipcRender.send('somemsg', data);ipcRender.on('replaymsg', (evt, otherData) =&gt; &#123; console.log(otherData)&#125;)// 主进程中const &#123;ipcMain&#125; = require('electron')ipcMain.on('somemsg', (evt, data) =&gt; &#123; console.log(data) evt.sender.send('replymsg', otherData);&#125;);// 同时Electron 也提供了同步的方式 不过切忌用 ipc 传递大量的数据，会有很大的性能问题，严重会让你整个应用卡住。 第二种是直接在渲染进程使用remote模块，remote 模块可以直接获取主进程中的模块。这种方式其实是第一种方式的简化。 123// 在渲染进程打开提示对话框const &#123;dialog&#125; = require('electron').remotedialog.showMessageBox(&#123; opts &#125;); 第三种是主进程向渲染进程发送消息 1this.webviewWindow.webContents.send('ping'); 第四种是渲染进程之间的通信 如果数据不需要实时性，只是渲染进程之间数据的共享，那么使用官方的建议即可：How to share data between web pages?。如果要求实时性，需要配合前几种种方式实现。 123456789101112// 主进程// 两个窗口互相获取对方的窗口 id, 并发送给渲染进程win1.webContents.send('distributeIds',&#123; win2Id : win2.id&#125;);win2.webContents.send('distributeIds',&#123; win1Id : win1.id&#125;);// 渲染进程// 通过 id 得到窗口remote.BrowserWindow.fromId(win2Id).webContents.send('someMsg', 'someThing'); Nodejs集成Electron 内集成了 Nodejs，大大的方便了开发。Nodejs 在主进程和渲染进程中都可以使用，上面说到，渲染进程因为安全限制，不能直接操作原生 GUI。虽然如此，因为集成了 Nodejs，渲染进程也有了操作系统底层 API 的能力，Nodejs 中常用的 Path、fs、Crypto 等模块在 Electron 可以直接使用，方便我们处理链接、路径、文件MD5等，同时npm还有成千上万的模块供我们选择。 尤其对于 Electron 不方便实现的功能，Nodejs 可能有奇效。我们应用中用户需要下载文件消息的文件，需要支持同事下载多个，并且需要给出进度，Electron 并没有提供一个好用的下载接口，所以我们使用 Nodejs 的 http、fs 模块结合 Electron 的 dialog 模块实现了文件下载，并且实现了下载进度以及下载超时错误提示。 HTML5增强不考虑兼容性应该是前端码农的梦想之一吧。Electron 使用 Chromium 来展示 web 页面，也就是我们开发只需要兼容 Chromium 浏览器即可，也就是说好多属性可以肆无忌惮的用：播放语音直接使用 HTML5 audio、大量数据存储使用数据库 IndexedDB、难搞的布局直接使用 Flexbox、方便的检测在线离线等等。 同时 Electron 对一些 HTML5 的特性进行了增强： 桌面通知，你可以直接使用 html5 的 notification，Electron会将其转化成为系统原生的桌面通知； File 对象，在Web应用中我们能得到的一般是类似 C:/fakePath/xxx.docx 的假路径，Electron在 File 对象上增加了一个path属性，可以用来获取选择的文件在文件系统中的真实路径。 a 标签的 download 属性，在 Web 应用中 a 标签增加 download 属性会强制浏览器下载，Electron 中会直接调起系统下载框下载，如果没有特殊需求推荐这种方式。 渲染进程调试和在浏览器中的调试完全一致。前面提到每个渲染进程完全独立，当你创建了多个web页面，每个页面都可以打开对应了调试工具，你可以和浏览器调试一样查看DOM、查看log、监听网络请求等等。同时 Electron 集成了 Nodejs，所以你在控制台或者断点时也能够调试 Nodejs 的 API，甚至因为渲染进程可以使用 remote 模块直接使用主进程的模块，你可以直接获取到这些数据以方便调试。 Electron 中的 Webview这次的新产品有一个需求，需要在客户端内加载 Webview 应用，并且要提供 jssdk 供 Web 应用使用，以获取更多的本地能力。其实 Electron 天然的优势可以加载外部应用的。但是要考虑的问题还是比较多的，比如要展示页面加载的进度、监听页面何时加载完成、页面 DOM 何时加载完成、服务端一些302重定向如何（比如一些跳转认证）处理、如何给 Web 应用提供 jssdk 等等。 Electron 提供了一系列的事件来监听页面的加载，细化到了页面开始加载、页面加载完成、页面加载失败、DOM Ready、框架加载 (did-frame-finish-load)、重定向（did-get-redirect-request）等等，通过监听这些事件可以对页面状态进行处理。 另外，如何给 Web 应用提供 jssdk 呢？我们需要依赖 BrowserWindow 的一个配置项 - preload，preload 允许你指定一段脚本在页面加载之前载入，这段脚本你可以使用 Electron 和 Nodejs 的 API，即使你在配置中不允许使用 Nodejs。 123456789101112131415// preload 示例var opts = &#123; autoHideMenuBar: true, fullscreenable: false, webPreferences: &#123; javascript: true, plugins: true, nodeIntegration: false, // 不集成 Nodejs webSecurity: false, preload: path.join(__dirname, 'preload/window_sdk.js') // 但预加载的 js 文件内仍可以使用 Nodejs 的 API &#125;&#125;this.webviewWindow = new BrowserWindow(opts); 预加载 js 文件与其他 js 并无二致，你只要根据你的业务，在 preload 的 js 中使用 remote 或者 ipc 通信给你的 Web 应用提供够用接口就好了。 写在后面Electron 并不是很复杂，在写完不多的主进程代码后，其他的业务代码几乎和 Web 应用没什么区别，甚至可以将一个线上应用迅速的包装成为一个客户端应用，比如electronic-wechat、worktile桌面端。不过坑不可避免（比如无法将 gif 写入剪切板等等），有时候也会感到很难像 Native 那样灵活，虽然如此，我还是很欣慰能有这样的工具，让我们前端可以做更多的事情。 最后多说一句：虽然Electron 的进程间通信很方便，而且支持多窗口，但我还是倾向于使用 Electron 构建单窗口应用，类似网易云音乐、Atom 等等，更简洁，思维方式上更像我们熟悉的 web 应用。","categories":[{"name":"2016年总结","slug":"2016年总结","permalink":"http://blog.smallsfe.com/categories/2016年总结/"}],"tags":[{"name":"Electron","slug":"Electron","permalink":"http://blog.smallsfe.com/tags/Electron/"}]},{"title":"聊聊这一年从技术麻瓜开始的奋斗史","slug":"聊聊这一年从技术麻瓜开始的奋斗史","date":"2017-01-22T15:11:49.000Z","updated":"2017-01-23T14:24:45.000Z","comments":true,"path":"2017/01/22/聊聊这一年从技术麻瓜开始的奋斗史/","link":"","permalink":"http://blog.smallsfe.com/2017/01/22/聊聊这一年从技术麻瓜开始的奋斗史/","excerpt":"技术麻瓜的大三狗，从初创公司唯一一个前端，到独自北漂在去哪儿进行寒假实习，最后南下腾讯暑期实习并成功转正。作为一只野生的程序员，经历了一年的野蛮生长。将这一年的经历记录下，回味这一年的成长。 背景介绍华科，通信工程专业学渣一枚，目前大四。","text":"技术麻瓜的大三狗，从初创公司唯一一个前端，到独自北漂在去哪儿进行寒假实习，最后南下腾讯暑期实习并成功转正。作为一只野生的程序员，经历了一年的野蛮生长。将这一年的经历记录下，回味这一年的成长。 背景介绍华科，通信工程专业学渣一枚，目前大四。大三暑假开始决定工作，便开始了一只技术麻瓜的技术学习史。想过做产品(没有项目跟进，不容易入门)，去实验室跟着看过大数据(门槛高，毕业的时候也难以有所小成去找工作)，最后于前后端之间选择了前端。一方面之前接触过一点点前端知识，另一方面，前端更有趣容易入门。而作为一只大三狗，学校技术团队是不会收留的。便开始了一只野生程序猿的修养。自己看书看资料看慕课的教学。 初入前端 2015.9.20 - 2015.10.20关键词： 校园创业团队 美食说 第一个项目 作为一个大一写个C代码 hello world 一个分号就能卡半个小时的我来说。入门也是非常痛苦的一件事，特别还没有组织，没人可以请教。于是加了一些群，扩展下信息的来源。在一个群里认识了一个研究生学长。研究生学长问我有没有团队，我说没有，他便欣然邀请我加入(当然事后证明这个学长还是满坑的)。学长在做一个”美食说“的项目，让我做商家管理后台。这时候也是第一次有人告诉我用Bootstrap(野生的什么都需要自己去探索)。一边我先自己买了本《深入理解Bootstrap》开始学习，另外一边他在催设计给图。 从2015.10.5号开始宅在寝室里开始coding，中间有不懂的却也没有人可以问，只能百度。问学长后台数据交互呢，却叫我先做了，把URL预留好就行（最后，后台也没有人写）。到10月末终于把设计稿都实现了。便把代码提交给他了，后来一直没有了回音。 虽然我知道这个项目水，但是我也知道我这样的菜鸡需要有项目的实践才能真正动起来。不然始终在看书，看视频的过程中。通过这个项目也算初步实践了。 美食说 github仓库地址 初创公司 2015.11.4 - 2015.12.14关键词： 聚美医 初创公司 唯一一个前端 找实习结束”美食说“项目之后，我知道了自己不足，继续资料学习，又开始脱产看起了书，把《深入理解Bootstrap》又重新看了一遍，仔细的学习其中组件，栅格，响应式等原理，学习其代码风格。 一两星期的学习之后，渐渐觉得学习进步的速度不够快。我开始打起了找家公司实习的想法。 先去了光谷创业街溜了溜，看到了很多公司，但是也不知道以何种方式去拿到实习机会，也有些胆怯。于是，回来后先看一些招聘网站。不管招不招实习，有邮箱就丢简历过去。当然都没有回音。这次不得不说起我加的一个前端群”小前端“，有次有人发了个招聘广告，我加了他好友，还没有主动询问，他却先向我问好，我和他说了情况，表示想找个实习。他说可以过来聊聊。约了第二天下午就过去了。 实习面试第二天下午怀揣着惴惴不安的心到了那家公司。却没想到对方直接就把我当面试的，就来面试我了。面我的人问了我做过什么项目，我就提到我之前做的项目，问我Bootstrap和jquery，还有一些栅格化，响应式布局的原理，好在之前都学习过。整个面试持续了近1小时，表示可以提供实习机会，想想已经11月了，再拖下去也不一定能够找到其他实习，也怕自己打消了继续找实习的勇气。于是答应了来实习，一周3天以上。 开始实习之后上班，每天7点多就起来了，在学习吃完早饭走到公司，往往第一个到达等待10-20分钟有人来开门。下班后，回学校吃完饭拖着上完一天班疲惫的身体，继续去自习室看书补充知识。 第一天上班，先是紧张而激动的整了整自己的工位，一边担心着自己太水而没办法完成任务。leader给我看了一个竞品的主页，让我用bootstrap做个静态页面出来。做了两天做好了(很easy的切图)，但是一直没有得到素材，产品那边的支持。便一直搁在那里。之后才了解到在公司，我是”唯一一个前端“，真是尴尬，我这样的水逼，真希望有个人来带我。公司就一个后台，一个安卓一个ios。我也就切好图就丢给后台老大了。当然，我也想说不是应该前后端分离么？就这么丢过去了？当然，我这样的水逼当时也只敢想想，我也不知道自己能否胜任。每天的工作内容就是设计切好图，把PSD丢给我，然后我把图上传到”标你妹“上，然后获得各个字体的大小，间距等等信息，然后开始制作移动端的页面。(现在回过头来看，那不应该是基于微信的网站么，但对我来说还是切图而已)。当然，也不是说切图就没什么好学习的。对于我这样一个新人，也是很好的熟悉前端的过程。在这过程中，我也去尝试了各种各样的CSS新属性，也学习了如何进行布局，也查阅了如何自定义radio的样式等等。 离职因为期末开始月的来临，越来越没法保证实习时间了。很多时候只能在学校切好图再丢过去。一边应付目不暇接的考试，一边还要切图真是考验人的意志。再加上一直拖着不发我的工资，百般催促之下也没有像一开始答应的那样付薪酬，导致我也不愿意继续去上班了。就选择了结束这段实习。同时，也是为自己去找寒假实习腾出了时间。github仓库 聚美医的实习总结 第一篇博客 2015.12.22日因为是一个野生的程序猿，所以格外注重扩展信息来源，于是经常逛社区，论坛，看博客。也知道大家推崇写博客，充实github，用google不用百度等等。为了尽力让自己更快的成长，我也尝试去写博客。 第一次博客是在 segmentfault 上发布的。源于我使用CSS3的新属性 Calc ,而android机器上这个属性兼容性很差，leader就让我去修复，然后我就不断就这个问题google，然后在 stackoverflow 上看到许多相关的东西，了解到另外一个新属性 box-sizing 也可以用来进行流式布局。 最后在 SF 发布了这篇文章 calc 与 box-sizing 的替代，审核了好几天，终于通过了，开心。本以为就此结束了，没想到SF的官方微博也转载了这篇文章一下帮我这条动态获得了6500的阅读量，之后也有另外几个论坛进行转载。这个事情很大的鼓舞了我继续写博客。 北漂去哪儿 2016.1.14 - 2016.2.24再起航结束了第一段实习之后，自知能力还远远不够，而明年3-4月份。BAT就要开始内推了。相比起学校那些从大一就开始专业搞编程的人来说，自觉还是差的太远了，为了实现弯道超车(当然也只是想追赶而已，知道还是存在许多差距的），决定在寒假前试试去北京或者上海找家大公司实习 —— 出来混的欠下的债都得还。 投简历，电面在寒假前又开始拼命投简历，从各个招聘网站和官网找邮箱丢简历，大部分都没有回音。当然也不出乎意料，毕竟寒假实习太非主流了，时间又短。投的的简历中，最后只有 头条 给了个电话面试的机会。2015.12.18 日接到一次电话面试，老激动了。无奈当时基础太渣，只知道怎么使用Bootstrap和jQuery。没有系统的去了解原生Javascript。于是一问就懵逼，不知道JS有哪几种基本变量类型等等基础知识。毕竟还年轻，当时也不知道有面经这种东西。所以不出意外再也没接到电话。 接下来，就要说到我的第一位贵人了，”小前端“的群里的”海哥“发去哪儿招寒假纯实习的广告。我便丢了份简历过去。因为本身也没指望着转正，觉得非常合适,能去大公司看看就太好了。2015.12.23 号晚上，去哪儿打了一次电话过来。又让我激动了一次，这次主要问的jQuery，回答的不怎么样，以至于最后面试官说，刚才我问你的几个都回答的不是很好，那你自己说说你知道的一些东西，这个时候平常看的书没白看。。。之前因为是野生的，就自己不断从图书馆借书看，囫囵吞枣的感觉。但也是记住了不少东西。这次回答的不错，面试官回答了一句，你旁边没有人吧？ 得到一丝认可的我，开心了一会。 当天下午，因为害怕找不到北京上海的实习，我去了一家武汉校友创办的企业面试，海豚浏览器，做了份试卷，先是技术过来面，然后产品最后HR，总共面了3面。让我回去等消息，两个星期内答复。 2015.12.25号圣诞节这一天早上，突然收到北京的来电，没想是去哪儿的HR，直接沟通发放实习offer的事情。真是圣诞老人送的一份大礼。(隔了几天也拿到了海豚的offer，拒绝了) 北漂初到北京期末考试结束，提前做完软件课设(写个课设系统，想锻炼原生JS的能力，写了一周，每天早上8点写到晚上1点多)，答辩前一天晚上调试到4点多，早上9点多去答辩，坐上了下午到北京的飞机。拖着本已被考试和课设项目拖的半垮的身子就过去了。周三晚上到北京，周四一早去报道，发现喉咙哑了，以为是雾霾太大喉咙发炎，leader说是空气太干了，涨知识了。第一天领了下机器，配了下环境，看了下文档。晚上回到住的地方，半夜突然又急性肠炎了。找了个药店买了点药，想想当时也是心酸。周末租了一个单间好好睡了一大觉，整个身体都恢复过来了。 工作生活因为是实习生，早出晚归，好好表现我还是知道的。第一次到大公司，熟悉开发流程，各种协同工作的流程。报道几天后，开始负责了一些小的需求和BUG的修复。因为实习时间较短的问题。一直也负责着这样的事情。在实习的时候，学会了使用fiddler本地调试，fekit构建代码，angular框架，git版本管理，断点调试等知识，同时利用空余时间阅读业务中的一些代码，了解整个运行过程，这一点还是非常有帮助的，阅读好的代码本身就是一种极佳的学习方式。空余时间，看看书，写写博客记录自己工作中遇到的问题。实习时间过的很快，一转眼就到了过年放假时间。 独自度过第一个年本身实习时间就短，过年只放7天回去的话又麻烦又浪费时间，便决定留在北京过年。老惨了，去哪哪关门，只有除夕夜下午提前吃了顿大餐，然后就是吃外卖~ 离职因为知道BAT这样的大公司，3-4月份就开始暑期实习的内推了。并且会问许多基础知识。于是，也正好乘着开学的时间结束去哪儿的实习，回来开始准备。去哪儿期间写的博文 ShellScript编程小结 正则表达小结与小知识点集锦 webpack替代fekit的折腾小记 第一个个人项目2.10号 正月初三，玩了几天后，便来公司继续学习，为了学以致用，实现自己的一个idea。kindle文字伴侣 github仓库kindle文字伴侣 网址传送门项目立意：kindle阅读中标记会产生一个mycliping.txt文件，每次都一小段一小段复制到诸如印象笔记， 为知笔记里。相信技术改变生活，本项目就是帮助自动解析mycliping.txt文本。 本是为了自己私用，有一次发到知乎上，结果收到很多人的赞赏，哈哈。知乎传送门:Kindle标注的重点和笔记可以导出吗？（当然，因为没有设计的原因，丑是丑了些） 南下腾讯 2016.6.18 - 2016.9.9关键词： 七次面试 计算机基础 php node 准备面试回来之后以考研的状态到图书馆里学习，早出晚归。过了一遍《JavaScript高级程序设计》，《CSS权威指南》，《数据结构》，《http权威指南》，《计算机网络》《微机原理》等书。作为一个学渣，之前计算机基础也是弱的不行。回过头来，自己再学习也是坎坷的。这次也学乖了，知道去网上参考许多面经，并且针对性的补全相应的知识。 之前问过一位学长:”面经的很重要么？”回答曰：”面经的重要程度就像你大学考前复习一样”。 面试内推又是“小前端”群里的武大学长“jeri”帮我内推的。腾讯的内推面试电话面试了4次，估计是流转了几个团队，但是因为有两次公司实习的经历，所以被几个团队从简历池中捞起了。当然当时也是不知道这个流程的。本以为面了4次该发offer了吧，或者拒掉我。结果让我周末去深圳现场面试，还好心理足够强大。去现场两轮技术一轮hr下来，拿到了offer，终于实现了自己的目标。面试的一些总结：FrontEndInterview github仓库面试期间的一些阅读笔记 网络相关 数据结构 开始腾讯的实习生活能够到腾讯这样的顶级公司实习自然是非常欣喜的。当然我也知道竞争也同样存在，继续好好表现，多多学习提高自己的能力是必须的。才去几天，就被leader拉去问：“写过PHP么？”，一脸懵逼的说没有–，但看过点(看过两本书，但是没有实践过)。leader继续说：“没事，这个简单”。就把我拉去开始写PHP的内部系统了。当然，其实我也很乐意，作为一个前端儿，一直被没有后端经历困惑住，许多东西只能停留在前端层面，一旦涉及到后端就一脸懵逼了。之后，另一个leader又让我负责迁移一个node的系统，艾玛，文档啥的都没有，还有一堆我不清楚的东西。也只能硬着头皮上。(我猜之所以给我做，其中一个原因是我带了本《深入浅出node.js》吧)。最后也做下来了，在这个过程中也仔细了解了一下express，以及node开发过程中的调试，线上部署的工具等等，收货颇多。PHP应用CI框架，在工作之余也仔细看了看其文档并简单分析了下其运行原理与流程。 并且运用早晚时间，浏览公司内网的帖子，扩展视野的同时，也解决了一些我过往存在的技术困惑。实习期间，前端方面的工作量倒不是很大，自主的阅读了下组内的前端模块代码，并了解了下代码组织方式与代码执行逻辑。整个实习下来，在加深前端认知的同时，帮我补足了后端这块空缺。 腾讯实习期间写的博文 阅读sea.js源码小结 深入阅读gulp源码小结 前后端交互过程中的编码 漫话密码存储 漫谈Web缓存 认识前端安全 最后大三这一年，过得最为辛苦，也是我成长最快的一年。总结这一年以来的成长史。有几点特别的经验。 想要成为什么样的人，先到这些人中去，去听，去看，去学(逛社区，看论坛，了解业内在发生些什么，知道自己怎么做才能和那些人一样优秀) 建立更多的连接(记得一本书上说过，当你想走出现有的生活的时候，给你打开思路的往往是那些微弱连接的人) 知道什么好，就去做。(诸如知道写博客是个好习惯，就好好去写) 过往的一年里，座右铭是《孙子兵法》第4篇《军形》中的不可胜在己，可胜在敌。故善战者，能为不可胜，不能使敌之必可胜。 故曰：胜可知，而不可为。 故善战者，立于不败之地，而不失敌之败也。 前几天突然产生了一个更有趣的想法，更适合作为我的座右铭。致力于做一个有故事的人。小时候听爸爸说他的故事，长大了去创造自己的故事；当父亲后有故事可讲；老了以后有故事可以回味。","categories":[{"name":"2016年总结","slug":"2016年总结","permalink":"http://blog.smallsfe.com/categories/2016年总结/"}],"tags":[{"name":"麻瓜","slug":"麻瓜","permalink":"http://blog.smallsfe.com/tags/麻瓜/"}]},{"title":"小白文艺程序媛的进阶之路","slug":"小白文艺程序媛的进阶之路","date":"2017-01-17T13:49:46.000Z","updated":"2017-01-22T16:32:45.000Z","comments":true,"path":"2017/01/17/小白文艺程序媛的进阶之路/","link":"","permalink":"http://blog.smallsfe.com/2017/01/17/小白文艺程序媛的进阶之路/","excerpt":"","text":"&emsp;&emsp;在刘总(WilsonLiu)的催促下写一下总结，帮助后面的求职小伙伴说不上，只是做一个心路分享，能有一些共鸣和启发就足矣。 &emsp;&emsp;背景介绍：2013级华东师范大学，软件工程(嵌入式)专业，代码小白的程序媛，经历百姓滴滴携程，最后决定在点评做一名萌萌哒的前端开发攻城狮n(≧▽≦)n 2016.1 - 2016-3&emsp;&emsp;大三上的那个寒假才是我认真学习前端知识，虽然大三上也零碎的在看。都因为学业打断，寒假认真过了一遍慕课网，然后自己动手做了一个进销存系统，很简单的增删改操作，目的在于了解前后端数据库大致的互动。这算是大学这么多年第一个一个人做的东西。就这次我就感觉和队友组队，和自己从头到尾做下来完全不一样。坑要自己踩才是自己的。然后，我打算参加春招，而且投的还是前端开发，必须得做个项目出来呗，所以就搭了一个网站，很简单，但好歹这个时候简历不是一张白纸了。虽然还是很不安。但总要去尝试一下嘛。 &emsp;&emsp;感谢“小前端”的@小羊，彼时是小羊内推我去饿了么面试，于是我就去参加了人生第一场面试，面试过程非常紧张，表现得不好，但是感觉打开了新世界，原来前端还有那么多工具，还有那么多技术，当时不明觉厉，深深觉得自己有很大差距。所以虽然失败，但回来恶补面试问题，每个问题都了解一下，算是扩展了一下知识面的广度。（在后面的很多场面试中，深深体会广度的重要性） &emsp;&emsp;还要感谢@小羊安利我百姓网，（看我当时多小白==只知道BAT）然后在拉勾网上面投递简历，第二天就约面试了~面试两面技术，一面就是基础的布局，还有寒假做的项目，是我以后的mentor，二面是jQuery，一丢丢小框架，当时觉得神奇，是后来的组长，三面HR就直接联系实习了。。所以我一直觉得自己运气蛮好的，果断答应。 ——百姓网实习——&emsp;&emsp;这是一家我最喜欢最感谢的公司，感谢他给我这个小白一个实习机会，让我见识了webpack，git，gulp，jade，stylus。。。你会说，这些都是工具，没错，但是他让我知道前端不是仅仅是html+css+javascript+bootstrap+jQuery。还可以有很多东西玩，还有很多安全，规范需要自己注意，这些东西都不是自学的时候能体会到的。所以万分感谢。 &emsp;&emsp;当然，初学者总是会被教育了，百姓网有一个很好的技术习惯，写daily。每个实习生都要写当天自己干了什么，学到了什么，诸如此类。虽然总是被mentor说我写得水，但是我是真的养成了总结的习惯，所以，学技术必须要记得总结，记得深挖问题。 &emsp;&emsp;但是我确实懒，一直没有把自己的总结整理出来，他们存在的形式，还是，bug，解决，原因三段形式。。也许这可以当做一个新年flag？哈哈 &emsp;&emsp;后来，因为自己考虑回家工作，于是从百姓离职。当天晚上，在寝室嚎啕大哭，特别舍不得，感觉四个月的实习生活，活得特别精彩充实，每天都在学习新东西，每天都是新人，被教育线上代码规范的情景总是历历在目，真心感谢这一群人，这一群年轻人包容敢拼敢闯，对我后面的生活有很大的帮助。 做技术的人都很可爱。O(∩_∩)O~——滴滴实习——&emsp;&emsp;回到重庆，发现自己还是喜欢技术，不喜欢那种朝九晚五，每天都在开会，签份文件要一封一封邮件的等，然后，我就继续投递简历。当时有人问我，为啥不回百姓，可能是近乡情怯吧？也可能是小孩子想做点成绩给大人看的心态？反正我当时挺不好意思的，然后就进了滴滴。在杭州，一个人租房子，全新的城市，全新的开始。八月份，在滴滴一来就直接上手一个项目，第一次没有后援，一个人负责项目，心里不是不心慌的。。于是每天加班到九点，就算做完了，也加紧学习angular，考虑白天写的代码能不能封装复用，过得是真的充实，非常愉快，滴滴教会了我什么，项目的把控能力算一个，mentor完全放权让我和后端测试谈进度，每天和我谈网络，谈性能，当真受益匪浅，工作好几年的技术官是真的不一样，后面离职的时候，好舍不得mentor，当时戏谈老大我还没有把你的知识学到1%就要走了。。真心，滴滴的实习让我开始正视网络性能这一块知识。作为前端开发工程师，这一块知识必不可少，不应该仅仅为了应付面试，是因为现在越来越多的事情可以在前端做掉，那如何提高速度，减少回退率，提高SEO就是我们要考虑的事情。 &emsp;&emsp;带着一颗受伤的心离开杭州，拖着行李，孑然一身，滞留在11月底的那个台风天，在火车站觉得自己好可怜，只能自己给自己一个拥抱。感觉这段经历让自己成长许多，慢慢在接触这个社会。滴滴这个团队我很喜欢，但是滴滴这个公司我没爱了，我认为一个公司应该做到责任和担当，今年的招聘实在没有看出来，后面好多实习生拿到offer也走了。无他，伤心了。哎，这么伤心的事情就不回顾了。惟愿我的mentor和团队伙伴们能好好的！咱们江湖再见！ ——携程实习——&emsp;&emsp;从滴滴回来，立马就去携程实习了。真的是很完美的环境，但是部门的代码实在太冗余了，一直以业务为驱动，一万行的css，不愿意重构，一个项目各个板块耦合太高，牵一发而动全身，我知道对于应届生的我，还是满希望能进入一个能快速成长的团队，虽然技术成长靠自己，但是每天十个小时在公司，工作能很大程度影响你的激情和代码习惯。所以我计划离职。期间有个学长问我愿不愿意转岗到机票，那边都是“现代化”前端，但是考虑到影响不好，我拒绝了。不过，携程是个不错的公司，选好团队部门就好，毕竟上海最大互联网嘛，哈哈。再说我的携程同事现在还在联系，每一份工作最大的收获不仅仅是技术，还有人和感情~ ——点评offer——&emsp;&emsp;携程实习期间，拿到点评offer。至此秋招结束。中间还拿到陆金所offer，近距离面对寸志老师，结果都没问什么技术，就过了。。感谢寸老师对我的认可，我知道是因为我前两份实习百姓和滴滴给我加分了。是的，从滴滴离职回来，我面试的基本都拿到offer了，在上海，百姓网的认可蛮高，后面面点评的时候，也会这种感觉，四面很快最多两个小时就过了。 &emsp;&emsp;要我总结的话，找实习很重要，每一份实习的沉淀更重要。趁着还年轻，趁着是实习，试错成本小，所以要多尝试，当然不是鼓励大家不断跳槽，每一份工作在最开始答应的时候，我都是怀着做到最后的想法，不然也不会千里迢迢去杭州租房了。每一份工作都要善始善终，就像滴滴携程后面要离职了，我都是把所有的上线项目做完再撤，即使心碎。我们总是说改别人的代码是痛苦的，当你敲下键盘的时候，要告诉自己，我不希望下一个接手代码的人吐槽这是什么鬼。嗯，我觉得这是技术人的基本素养。 ——最后——&emsp;&emsp;回首2016年，从1月开始过完慕课网路径，3月入职百姓，正式踏入前端这条路，虽然中间曲曲折折，有泪有笑，上面写的都是拿到offer的，还有很多失败的，比如网易，比如腾讯，都是泪，这个就不写了，毕竟还是想传递一下正能量的~ 大家记得因上努力,果上随缘就好，永远不要太过执念，累人累己，毕竟XX也不过是一家公司（这话当时让霸面的我泪崩==）。所以。。你看，执念的offer我都没拿到，随遇而安的我都拿到了。还都很好，我后面都调侃是前面的人品攒起来了，哈哈。这就叫缘分（摊手） &emsp;&emsp;嗯，永远相信缘分！永远相信下一刻会更好！ &emsp;&emsp;这条技术路起起伏伏，收获良多，慢慢知道自己喜欢什么，想要什么，从一个想转专业的文艺妹纸变成了程序媛。有些时候真是笑叹造化弄人，谁能想到？无外乎是喜欢罢了，趁着还喜欢代码，就多敲敲。 &emsp;&emsp;你要是问我工作的选择，北上广逃离还是停留。我想说，在填饱肚子，能反哺父母的基础上，再考虑梦想吧。父母在不远游，游必有方。 &emsp;&emsp;在找工作或者正在工作的伙伴们，请相信美好马上就会降临，永远有一首诗有一首歌能让你动容，内心有一片美好的山水，怀着稚子之心为了未来奋斗，趁着还喜欢，趁着还年轻，多折腾一下，尝试一下不一样的活法，最后找到自己最喜欢最能接受的，然后就心无旁骛的走下去吧。 &emsp;&emsp;愿大家都能好好的。一世长安。 以上。 掘金征文活动的链接： https://gold.xitu.io/post/587f0e7a5c497d0058bcabd7","categories":[{"name":"2016年总结","slug":"2016年总结","permalink":"http://blog.smallsfe.com/categories/2016年总结/"}],"tags":[{"name":"程序媛","slug":"程序媛","permalink":"http://blog.smallsfe.com/tags/程序媛/"}]}]}